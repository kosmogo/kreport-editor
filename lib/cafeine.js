// Generated by CoffeeScript 1.6.1

/*
  cafeine for coffeescript.
  "Because cafeined coffee is always better"
  v0.1 alpha
*/


(function() {
  var ActiveObject, Cafeine, Container, IterableFunction, Singleton, Validation, _CAFEINE_ROOT, _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof _CAFEINE_ROOT === "undefined" || _CAFEINE_ROOT === null) {
    _CAFEINE_ROOT = window || this;
  }

  _CAFEINE_ROOT.Cafeine = {
    merge: function(to, obj) {
      var k, v;
      for (k in obj) {
        v = obj[k];
        if (Object.hasOwnProperty.call(obj, k)) {
          if ((to[k] != null) && typeof to[k] === 'object') {
            _CAFEINE_ROOT.Cafeine.merge(to[k], v);
          } else {
            to[k] = v;
          }
        }
      }
      return to;
    },
    property: function(obj, target, opts) {
      if (obj == null) {
        obj = {};
      }
      if (opts == null) {
        opts = {};
      }
      Object.defineProperty(obj, target, _CAFEINE_ROOT.Cafeine.merge({
        enumerable: true,
        configurable: true,
        get: function() {
          throw new Error("get#" + target + " is undefined");
        },
        set: function(value) {
          throw new Error("set#" + target + " is undefined");
        }
      }, opts));
      return target;
    },
    invoke: function(constructor, parameters) {
      var args, fn;
      args = [null].concat(parameters);
      fn = constructor.bind.apply(constructor, args);
      return new fn();
    },
    kv: function(k, v) {
      var o;
      (o = {})[k] = v;
      return o;
    },
    inspect: function(obj) {
      return console.log(_CAFEINE_ROOT.Cafeine.merge({}, obj));
    }
  };

  _CAFEINE_ROOT.Cafeine.ActiveObject = ActiveObject = (function() {

    function ActiveObject() {}

    ActiveObject.include = function() {
      var module, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        module = arguments[_i];
        if (module != null) {
          _results.push(_CAFEINE_ROOT.Cafeine.merge(this, module));
        } else {
          throw new Error("One or more module are unknown and can't be included.");
        }
      }
      return _results;
    };

    ActiveObject.attr_accessor = function() {
      var properties, property, _i, _len, _results;
      properties = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        _results.push((function(property, proto, prop) {
          return Object.defineProperty(proto, property, {
            enumerable: true,
            configurable: true,
            get: function() {
              return this[prop];
            },
            set: function(value) {
              return this[prop] = value;
            }
          });
        })(property, this.prototype, "_" + property));
      }
      return _results;
    };

    ActiveObject.attr_readable = function(properties) {
      var func, name, _results;
      _results = [];
      for (name in properties) {
        func = properties[name];
        _results.push((function(name, func, proto) {
          return Object.defineProperty(proto, name, {
            enumerable: true,
            configurable: true,
            get: function() {
              return func.apply(this);
            },
            set: function() {
              throw new Error('Read only attribute.');
            }
          });
        })(name, func, this.prototype));
      }
      return _results;
    };

    ActiveObject.attr = function(property, opts) {
      return (function(name, proto, opts, prop) {
        return _CAFEINE_ROOT.Cafeine.property(proto, name, opts);
      })(property, this.prototype, opts, "_" + property);
    };

    ActiveObject.attr_accessor_d = function() {
      var properties, property, _i, _len, _results;
      properties = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        _results.push((function(property, proto, prop) {
          return Object.defineProperty(proto, property, {
            enumerable: true,
            configurable: true,
            get: function() {
              if (typeof this[prop] === 'function') {
                return this[prop]();
              } else {
                return this[prop];
              }
            },
            set: function(value) {
              return this[prop] = value;
            }
          });
        })(property, this.prototype, "_" + property));
      }
      return _results;
    };

    return ActiveObject;

  })();

  Array.prototype.remove = function(from, to) {
    var rest, _ref;
    rest = this.slice((to || from) + 1 || this.length);
    this.length = (_ref = from < 0) != null ? _ref : this.length + {
      from: from
    };
    return this.push.apply(this, rest);
  };

  if ((_ref = (_base = Array.prototype).each) == null) {
    _base.each = function(callback) {
      var idx, obj, _i, _len;
      for (idx = _i = 0, _len = this.length; _i < _len; idx = ++_i) {
        obj = this[idx];
        callback(obj, idx);
      }
      return this;
    };
  }

  if ((_ref1 = (_base1 = Array.prototype).collect) == null) {
    _base1.collect = Array.prototype.map;
  }

  if ((_ref2 = (_base2 = Array.prototype).random) == null) {
    _base2.random = function() {
      return this[Math.floor(Math.random() * this.length)];
    };
  }

  if ((_ref3 = (_base3 = Array.prototype).intersect) == null) {
    _base3.intersect = function(anotherArray) {
      var ret, x, _i, _len;
      if (this.length > anotherArray.length) {
        return anotherArray.intersect(this);
      }
      ret = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (anotherArray.indexOf(x) !== -1) {
          ret.push(x);
        }
        if (ret.length === this.length) {
          return ret;
        }
      }
      return ret;
    };
  }

  if ((_ref4 = (_base4 = Array.prototype).combine) == null) {
    _base4.combine = function(anotherArray) {
      var ret, x, _i, _len;
      if (anotherArray == null) {
        return [].combine(this);
      }
      ret = [].concat(this);
      for (_i = 0, _len = anotherArray.length; _i < _len; _i++) {
        x = anotherArray[_i];
        if (ret.indexOf(x) === -1) {
          ret.push(x);
        }
      }
      return ret;
    };
  }

  if ((_ref5 = (_base5 = Array.prototype).uniq) == null) {
    _base5.uniq = function(condition) {
      var new_array;
      if (condition == null) {
        condition = function(a, b) {
          return a === b;
        };
      }
      new_array = [];
      this.each(function(elm) {
        var found, x, _i, _len;
        found = false;
        for (_i = 0, _len = new_array.length; _i < _len; _i++) {
          x = new_array[_i];
          if (condition(elm, x)) {
            found = true;
            break;
          }
        }
        if (!found) {
          return new_array.push(elm);
        }
      });
      return new_array;
    };
  }

  if ((_ref6 = (_base6 = Array.prototype).compact) == null) {
    _base6.compact = function() {
      var ret, x, _i, _len;
      ret = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (x != null) {
          ret.push(x);
        }
      }
      return ret;
    };
  }

  _CAFEINE_ROOT.Cafeine.Container = Container = (function(_super) {
    var ContentHelper, DEFAULT_HASH_FUNC, add_index_many_multiple_fields, add_index_unique_multiple_fields;

    __extends(Container, _super);

    function Container() {
      return Container.__super__.constructor.apply(this, arguments);
    }

    ContentHelper = (function() {

      function ContentHelper(parent, names) {
        this.parent = parent;
        this.names = names;
      }

      ContentHelper.prototype.index = function() {
        var args, name, _i, _len, _ref7, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref7 = this.names;
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          name = _ref7[_i];
          _results.push(this.parent.add_index.apply(this.parent, [name].concat(args)));
        }
        return _results;
      };

      ContentHelper.prototype.validates = function() {
        var args, name, _i, _len, _ref7, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref7 = this.names;
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          name = _ref7[_i];
          _results.push(this.parent.validates_schema.apply(this.parent, [name].concat(args)));
        }
        return _results;
      };

      return ContentHelper;

    })();

    Container.contains = function() {
      var clazz_name, k, models, _fn, _i, _len, _name, _ref7,
        _this = this;
      models = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _fn = function(clazz_name, self) {
        var attr, clazz_name_p;
        clazz_name_p = clazz_name.pluralize();
        (attr = {})["" + clazz_name_p] = function() {
          var _name, _ref7;
          return (_ref7 = this[_name = "_" + clazz_name_p]) != null ? _ref7 : this[_name] = [];
        };
        self.attr_readable(attr);
        self.prototype["add_" + clazz_name] = function() {
          var indexes, resource, resources, _j, _len1, _name, _ref7, _results;
          resources = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if ((_ref7 = this[_name = "_" + clazz_name_p]) == null) {
            this[_name] = [];
          }
          _results = [];
          for (_j = 0, _len1 = resources.length; _j < _len1; _j++) {
            resource = resources[_j];
            this["_" + clazz_name_p].push(resource);
            _results.push((function() {
              var _k, _len2, _ref8, _results1;
              _ref8 = this.constructor["_" + clazz_name + "_indexes"];
              _results1 = [];
              for (_k = 0, _len2 = _ref8.length; _k < _len2; _k++) {
                indexes = _ref8[_k];
                _results1.push(indexes.call(this, "add", resource));
              }
              return _results1;
            }).call(this));
          }
          return _results;
        };
        self.prototype["remove_" + clazz_name] = function() {
          var idx, indexes, resource, resources, _j, _len1, _results;
          resources = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (this["_" + clazz_name_p] != null) {
            _results = [];
            for (_j = 0, _len1 = resources.length; _j < _len1; _j++) {
              resource = resources[_j];
              _results.push((function() {
                var _results1;
                _results1 = [];
                while ((idx = this["_" + clazz_name_p].indexOf(resource)) !== -1) {
                  this["_" + clazz_name_p].remove(idx);
                  _results1.push((function() {
                    var _k, _len2, _ref7, _results2;
                    _ref7 = this.constructor["_" + clazz_name + "_indexes"];
                    _results2 = [];
                    for (_k = 0, _len2 = _ref7.length; _k < _len2; _k++) {
                      indexes = _ref7[_k];
                      _results2.push(indexes.call(this, "remove", resource));
                    }
                    return _results2;
                  }).call(this));
                }
                return _results1;
              }).call(this));
            }
            return _results;
          }
        };
        return self.prototype["clear_" + clazz_name_p] = function() {
          var indexes, _j, _len1, _ref7, _results;
          if (this["_" + clazz_name_p] != null) {
            this["_" + clazz_name_p].length = 0;
            _ref7 = this.constructor["_" + clazz_name + "_indexes"];
            _results = [];
            for (_j = 0, _len1 = _ref7.length; _j < _len1; _j++) {
              indexes = _ref7[_j];
              _results.push(indexes.call(this, "clear"));
            }
            return _results;
          }
        };
      };
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        k = models[_i];
        clazz_name = k.underscorize();
        if ((_ref7 = this[_name = "_" + clazz_name + "_indexes"]) == null) {
          this[_name] = [];
        }
        _fn(clazz_name, this);
      }
      return function(cb) {
        return cb.call(_CAFEINE_ROOT.Cafeine.merge(new ContentHelper(_this, models), _CAFEINE_ROOT.Cafeine.Validation));
      };
    };

    Container.validates_schema = function(schema, validator) {
      var clazz_name;
      clazz_name = schema.underscorize();
      return (function(validator, clazz_name, self) {
        var old_add;
        old_add = self.prototype["add_" + clazz_name];
        return self.prototype["add_" + clazz_name] = function() {
          var resource, _i, _len;
          for (_i = 0, _len = arguments.length; _i < _len; _i++) {
            resource = arguments[_i];
            validator.call(this, resource);
          }
          return old_add.apply(this, arguments);
        };
      })(validator, clazz_name, this);
    };

    Container.sort_schema = function(schema, sort_function) {
      return "";
    };

    DEFAULT_HASH_FUNC = function() {
      var ret, values, x, _i, _len;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ret = '';
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        x = values[_i];
        ret += (function() {
          switch (typeof x) {
            case 'object':
              return JSON.stringify(x);
            case 'function':
              return x.toString();
            default:
              return x;
          }
        })();
      }
      return ret;
    };

    add_index_unique_multiple_fields = function(model, fields, opts) {
      var clazz_name, fields_name, find_name;
      if (opts == null) {
        opts = opts;
      }
      clazz_name = model.underscorize();
      fields_name = fields.join("_");
      find_name = fields.join("_and_");
      this["_" + clazz_name + "_indexes"].push((function(fields) {
        return function(target, resource) {
          var key, _name, _ref7;
          if (resource != null) {
            key = opts.hash.apply(resource, fields.map(function(f) {
              return resource[f];
            }));
          }
          switch (target) {
            case 'add':
              if ((_ref7 = this[_name = "_" + clazz_name + "_index_" + fields_name]) == null) {
                this[_name] = {};
              }
              return this["_" + clazz_name + "_index_" + fields_name][key] = resource;
            case 'remove':
              return delete this["_" + clazz_name + "_index_" + fields_name][key];
            case 'clear':
              return this["_" + clazz_name + "_index_" + fields_name] = {};
          }
        };
      })(fields));
      return this.prototype["find_" + clazz_name + "_by_" + find_name] = (function(fields, opts) {
        return function() {
          var key, values, _ref7, _ref8;
          values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          key = opts.hash.apply(this, values);
          return (_ref7 = (_ref8 = this["_" + clazz_name + "_index_" + fields_name]) != null ? _ref8[key] : void 0) != null ? _ref7 : void 0;
        };
      })(fields, opts);
    };

    add_index_many_multiple_fields = function(model, fields, opts) {
      var clazz_name, fields_name, find_name;
      clazz_name = model.underscorize();
      fields_name = fields.join("_");
      find_name = fields.join("_and_");
      this["_" + clazz_name + "_indexes"].push((function(fields, opts) {
        return function(target, resource) {
          var arr, idx, key, value, _base7, _base8, _i, _len, _name, _name1, _ref10, _ref11, _ref7, _ref8, _ref9, _results;
          if (target === 'clear') {
            return this["_" + clazz_name + "_index_" + fields_name] = {};
          }
          if (fields.length === 1 && resource[fields[0]] instanceof Array) {
            _ref7 = resource[fields[0]];
            _results = [];
            for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
              value = _ref7[_i];
              if (resource != null) {
                key = opts.hash.call(resource, value);
              }
              switch (target) {
                case 'add':
                  if ((_ref8 = this[_name = "_" + clazz_name + "_index_" + fields_name]) == null) {
                    this[_name] = {};
                  }
                  _results.push(((_ref9 = (_base7 = this["_" + clazz_name + "_index_" + fields_name])[key]) != null ? _ref9 : _base7[key] = []).push(resource));
                  break;
                case 'remove':
                  arr = this["_" + clazz_name + "_index_" + fields_name][key];
                  if ((arr != null) && (idx = arr.indexOf(resource)) !== -1) {
                    _results.push(arr.remove(idx));
                  } else {
                    _results.push(void 0);
                  }
                  break;
                default:
                  _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (resource != null) {
              key = opts.hash.apply(resource, fields.map(function(f) {
                return resource[f];
              }));
            }
            switch (target) {
              case 'add':
                if ((_ref10 = this[_name1 = "_" + clazz_name + "_index_" + fields_name]) == null) {
                  this[_name1] = {};
                }
                return ((_ref11 = (_base8 = this["_" + clazz_name + "_index_" + fields_name])[key]) != null ? _ref11 : _base8[key] = []).push(resource);
              case 'remove':
                arr = this["_" + clazz_name + "_index_" + fields_name][key];
                if ((arr != null) && (idx = arr.indexOf(resource)) !== -1) {
                  return arr.remove(idx);
                }
            }
          }
        };
      })(fields, opts));
      return this.prototype["find_" + (clazz_name.pluralize()) + "_by_" + find_name] = (function(fields, opts) {
        return function() {
          var key, values, _ref7, _ref8;
          values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          key = opts.hash.apply(this, values);
          return (_ref7 = (_ref8 = this["_" + clazz_name + "_index_" + fields_name]) != null ? _ref8[key] : void 0) != null ? _ref7 : [];
        };
      })(fields, opts);
    };

    Container.add_index = function(model, fields, opts) {
      var clazz_name, _ref7;
      if (opts == null) {
        opts = {};
      }
      clazz_name = model.underscorize();
      if (!this.prototype["add_" + clazz_name]) {
        throw new Error("You need to add model " + model + " first.");
      }
      if (typeof fields === 'string') {
        fields = [fields];
      }
      if ((_ref7 = opts.hash) == null) {
        opts.hash = DEFAULT_HASH_FUNC;
      }
      if (opts.many) {
        return add_index_many_multiple_fields.call(this, model, fields, opts);
      } else {
        return add_index_unique_multiple_fields.call(this, model, fields, opts);
      }
    };

    return Container;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

  _CAFEINE_ROOT.Cafeine.Editable = (function(_super) {
    var OID, _OID;

    __extends(Editable, _super);

    function Editable() {
      return Editable.__super__.constructor.apply(this, arguments);
    }

    _OID = 0;

    OID = function() {
      return _OID++;
    };

    Editable.editable = function(field_list) {
      var _base7, _ref7, _ref8;
      if (typeof window === "undefined" || window === null) {
        throw new Error("This module should be used into a DOM context.");
      }
      if (this.observable == null) {
        this.include(_CAFEINE_ROOT.Cafeine.Observable);
      }
      this.observable('edition_done');
      if ((_ref7 = this["_editable_fields"]) == null) {
        this["_editable_fields"] = {};
      }
      _CAFEINE_ROOT.Cafeine.merge(this["_editable_fields"], field_list);
      return (_ref8 = (_base7 = this.prototype).create_edit_form) != null ? _ref8 : _base7.create_edit_form = function(opts) {
        var content, field, field_id, fields, k, label, m, markups, opt, option, self, v, _i, _j, _len, _len1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref9,
          _this = this;
        opts = Cafeine.merge({
          buttons: {
            'Apply': function(button, form, evt) {
              console.log("we submit?");
              return form.submit();
            }
          },
          "class": '',
          per_field_update: false,
          id: null,
          decoration: function(label, control) {
            return [label, control];
          }
        }, opts);
        content = document.createElement('form');
        content.setAttribute('class', opts["class"]);
        if (opts.id != null) {
          content.id = opts.id;
        }
        fields = {};
        _ref9 = this.constructor["_editable_fields"];
        for (k in _ref9) {
          v = _ref9[k];
          field_id = "create_edit_form_" + k + "_" + (OID());
          if (typeof v.type === 'string') {
            field = document.createElement('input');
            field.name = "" + k;
            field.id = field_id;
            switch (v.type || 'string') {
              case 'string':
              case 'number':
                field.type = "text";
                break;
              case 'boolean':
                field.type = 'checkbox';
                field.checked = (_ref10 = this[k]) != null ? _ref10 : false;
            }
          } else if (v.type instanceof Array) {
            field = document.createElement('select');
            field.name = "" + k;
            field.id = field_id;
            _ref11 = v.type;
            for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
              opt = _ref11[_i];
              option = document.createElement('option');
              option.innerHTML = opt;
              option.value = opt;
              if (option.value === this[k]) {
                option.setAttribute("selected", "selected");
              }
              field.appendChild(option);
            }
          }
          field.setAttribute("value", this[k] || "");
          if (opts.per_field_update) {
            self = this;
            field.onchange = (function(field, k, v) {
              return function() {
                if (field.tagName === "SELECT") {
                  if ((field.selectedOptions != null) && field.selectedOptions.length > 0) {
                    self[k] = field.selectedOptions[0].value;
                  }
                } else if (field.type === "checkbox") {
                  self[k] = field.checked;
                } else {
                  self[k] = field.value;
                }
                return self.fire_edition_done(k);
              };
            })(field, k, v);
          }
          label = document.createElement('label');
          label.innerHTML = (_ref12 = v.label) != null ? _ref12 : k.underscorize();
          label.setAttribute("for", field.id);
          label.setAttribute("title", (_ref13 = (_ref14 = v.description) != null ? _ref14 : v.label) != null ? _ref13 : k.underscorize());
          markups = opts.decoration(label, field);
          if (!(markups instanceof Array)) {
            markups = [markups];
          }
          for (_j = 0, _len1 = markups.length; _j < _len1; _j++) {
            m = markups[_j];
            content.appendChild(m);
          }
          fields[k] = field;
        }
        content.apply_to_object = function() {
          var _ref15;
          _ref15 = _this.constructor["_editable_fields"];
          for (k in _ref15) {
            v = _ref15[k];
            if (fields[k].tagName === "SELECT") {
              _this[k] = fields[k].selectedOptions[0].value;
            } else if (fields[k].type === "checkbox") {
              _this[k] = field.checked;
            } else {
              _this[k] = fields[k].value;
            }
          }
          return _this.fire_edition_done();
        };
        return content;
      };
    };

    return Editable;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

  /*
  # Here we got a conceptual work in  progress.
  # Don't use this class yet. Just ignore em.
  # Dunno if one time it will works!
  */


  _CAFEINE_ROOT.Cafeine.IterableFunction = IterableFunction = (function() {
    var IterableFunctionStruct;

    function IterableFunction() {}

    IterableFunctionStruct = (function() {

      IterableFunctionStruct.prototype["yield"] = function() {
        var _ref7;
        return (_ref7 = this._callback) != null ? _ref7.apply(this, arguments) : void 0;
      };

      IterableFunctionStruct.prototype.retry = function() {
        return this._next_state = this._state;
      };

      IterableFunctionStruct.prototype.wait = function(what) {
        var timestamp;
        if (typeof what === 'number') {
          timestamp = new Date().getTime();
          (function(timestamp, time) {
            return what = function() {
              return (new Date().getTime() - timestamp) > time;
            };
          })(timestamp, what);
        }
        return this._to_wait = what;
      };

      IterableFunctionStruct.prototype.stop = function() {
        return this._stopped = true;
      };

      IterableFunctionStruct.prototype.goto = function(target) {
        return this._next_state = this._cb_idx[target];
      };

      IterableFunctionStruct.prototype.call_all_async = function(ret) {
        if (this._to_wait != null) {
          if (!this._to_wait()) {
            window.setTimeout((function() {
              return this.call_all_async(ret);
            }).bind(this), 5);
            return;
          } else {
            this._to_wait = void 0;
          }
        }
        if (this.call(ret)) {
          return window.setTimeout((function() {
            return this.call_all_async(ret);
          }).bind(this), 5);
        }
      };

      IterableFunctionStruct.prototype.call = function(ret) {
        if (this._to_wait != null) {
          if (!this._to_wait()) {
            return true;
          }
        }
        this._to_wait = void 0;
        this._callback = ret;
        this._next_state = void 0;
        this._cb[this._state].call(this);
        if (this._stopped) {
          return false;
        }
        if (this._next_state == null) {
          this._next_state = this._state + 1;
        }
        if (this._next_state < this._cb.length) {
          this._state = this._next_state;
        } else {
          return false;
        }
        return true;
      };

      function IterableFunctionStruct() {
        var next_name, parameters, value, _i, _len;
        parameters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this._state = 0;
        this._cb = [];
        this._cb_idx = {};
        for (_i = 0, _len = parameters.length; _i < _len; _i++) {
          value = parameters[_i];
          if (typeof value === 'string') {
            next_name = value;
          } else if (typeof value === 'function') {
            if (next_name != null) {
              this._cb_idx[next_name] = this._cb.length;
              next_name = void 0;
            }
            this._cb.push(value);
          }
        }
      }

      return IterableFunctionStruct;

    })();

    return IterableFunction;

  })();

  this.iterable_function = function() {
    var name, parameters;
    name = arguments[0], parameters = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (function(self, name) {
      var it;
      it = Cafeine.invoke(IterableFunctionStruct, parameters);
      return self[name] = function(cb) {
        var output;
        return output = function() {
          return it.call(cb);
        };
      };
    })(this, name);
    return (function(self, name) {
      var it;
      it = Cafeine.invoke(IterableFunctionStruct, parameters);
      return self["" + name + "_async"] = function(cb) {
        var output;
        return output = function() {
          return it.call_all_async(cb);
        };
      };
    })(this, name);
  };

  if ((_ref7 = Math.clamp) == null) {
    Math.clamp = function(l, v, h) {
      if (v < l) {
        return l;
      } else if (v > h) {
        return h;
      } else {
        return v;
      }
    };
  }

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'second', {
    get: function() {
      return 1000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'seconds', {
    get: function() {
      return 1000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'minute', {
    get: function() {
      return 60000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'minutes', {
    get: function() {
      return 60000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'hour', {
    get: function() {
      return 3600000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'hours', {
    get: function() {
      return 3600000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'day', {
    get: function() {
      return 86400000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'days', {
    get: function() {
      return 86400000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'week', {
    get: function() {
      return 604800000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'weeks', {
    get: function() {
      return 604800000 * this;
    }
  });

  _CAFEINE_ROOT.Cafeine.property(Number.prototype, 'fract', {
    get: function() {
      return this - Math.floor(this);
    }
  });

  Number.prototype.floor = function(x) {
    if (x != null) {
      return Math.floor(this / x) * x;
    } else {
      return Math.floor(this);
    }
  };

  Number.prototype.ceil = function(x) {
    if (x != null) {
      return Math.ceil(this / x) * x;
    } else {
      return Math.ceil(this);
    }
  };

  Number.prototype.round = function(x) {
    if (x != null) {
      return Math.round(this / x) * x;
    } else {
      return Math.round(this);
    }
  };

  Number.prototype.fixed_int = function(int_part, dec_part) {
    var arr, str;
    str = Math.floor(this).toString();
    int_part -= str.length;
    arr = [];
    while ((int_part -= 1) >= 0) {
      arr.push('0');
    }
    if (dec_part) {
      arr.push(this.toFixed(dec_part));
    } else {
      arr.push(this.toString());
    }
    return arr.join('');
  };

  Cafeine = _CAFEINE_ROOT.Cafeine;

  Cafeine.Observable = (function(_super) {

    __extends(Observable, _super);

    function Observable() {
      return Observable.__super__.constructor.apply(this, arguments);
    }

    Observable.observable = function() {
      var events, evt, _i, _len, _results;
      events = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        evt = events[_i];
        _results.push((function(evt, self) {
          var evt_u, table;
          evt_u = evt.underscorize();
          table = "_" + evt_u + "_listeners";
          self.prototype["fire_" + evt_u] = function() {
            var params,
              _this = this;
            params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (this[table] != null) {
              return this[table].each(function(callback) {
                return callback.apply(_this, params);
              });
            }
          };
          self.prototype["when_" + evt_u] = function() {
            var callback, params, _j, _len1, _ref8, _results1;
            params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            _results1 = [];
            for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
              callback = params[_j];
              if (typeof callback === 'function') {
                _results1.push(((_ref8 = this[table]) != null ? _ref8 : this[table] = []).push(callback));
              }
            }
            return _results1;
          };
          self.prototype["unbind_" + evt_u] = function() {
            var idx, obj, params, _j, _len1, _results1;
            params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (this[table] != null) {
              _results1 = [];
              for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
                obj = params[_j];
                _results1.push((function() {
                  var _results2;
                  _results2 = [];
                  while ((idx = this[table].indexOf(obj)) !== -1) {
                    _results2.push(this[table].remove(idx));
                  }
                  return _results2;
                }).call(this));
              }
              return _results1;
            }
          };
          self.prototype["clear_" + evt_u + "_listeners"] = function() {
            if (this[table] != null) {
              return this[table].length = 0;
            }
          };
          return self.attr_readable(Cafeine.kv(table, function() {
            var _name, _ref8;
            return (_ref8 = this[_name = "_" + table]) != null ? _ref8 : this[_name] = [];
          }));
        })(evt, this));
      }
      return _results;
    };

    return Observable;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

  _CAFEINE_ROOT.Cafeine.Plugin = (function(_super) {

    __extends(Plugin, _super);

    function Plugin() {
      return Plugin.__super__.constructor.apply(this, arguments);
    }

    Plugin.jquery_plugin = function(name, todo) {
      var clazz;
      if (typeof jQuery === "undefined" || jQuery === null) {
        console.error("jquery_plugin call need to load jQuery library first.");
        return false;
      }
      clazz = this;
      return jQuery.fn[name] = function() {
        var $this, args, data_name, _ref8;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        $this = jQuery(this);
        data_name = "cafeine-plugin-" + name;
        $this.each(function() {
          var $$this;
          $$this = jQuery(this);
          if ($$this.data(data_name) == null) {
            $$this.data(data_name, Cafeine.invoke(clazz, [this]));
          }
          if (args.length >= 1) {
            if (typeof args[0] === 'function') {
              return args[0].apply($$this.data(data_name), args.slice(1));
            } else {
              return clazz.prototype[args[0]].apply($$this.data(data_name), args.slice(1));
            }
          }
        });
        return (_ref8 = todo != null ? todo.call(this) : void 0) != null ? _ref8 : $this;
      };
    };

    Plugin.mootools_plugin = function() {
      throw new Error("Not implemented yet.");
    };

    Plugin.underscore_plugin = function() {
      throw new Error("Not implemented yet.");
    };

    return Plugin;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

  _CAFEINE_ROOT.Cafeine.Singleton = Singleton = (function(_super) {

    __extends(Singleton, _super);

    function Singleton() {
      return Singleton.__super__.constructor.apply(this, arguments);
    }

    Singleton.singleton = function(name) {
      if (name == null) {
        name = 'instance';
      }
      return (function(target, name) {
        return Object.defineProperty(target, name, {
          enumerable: true,
          configurable: false,
          get: function() {
            if (target["_" + name] == null) {
              target["_" + name] = new target();
            }
            return target["_" + name];
          }
        });
      })(this, name);
    };

    return Singleton;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

  String.prototype.underscorize = function() {
    return this.replace(' ', '_').replace(/([a-z0-9$\ ])([A-Z])/g, function(match, group1, group2, idx, source) {
      return group1 + "_" + group2.toLowerCase();
    }).replace(/([A-Z])([a-z0-9$\ ])/g, function(match, group1, group2, idx, source) {
      if (idx === 0) {
        return match;
      }
      return "_" + group1.toLowerCase() + group2.toLowerCase();
    }).toLowerCase();
  };

  String.prototype.dasherize = function() {
    return this.replace(' ', '-').replace(/([a-z0-9$\ ])([A-Z])/g, function(match, group1, group2, idx, source) {
      return group1 + "-" + group2.toLowerCase();
    }).replace(/([A-Z])([a-z0-9$\ ])/g, function(match, group1, group2, idx, source) {
      if (idx === 0) {
        return match;
      }
      return "-" + group1.toLowerCase() + group2.toLowerCase();
    }).toLowerCase();
  };

  String.prototype.capitalize = function() {
    return this.replace(/[\ _-][a-z]/g, function(match, idx, source) {
      return match.charAt(1).toUpperCase();
    }).replace(/^[a-z]/, function(match) {
      return match.toUpperCase();
    });
  };

  String.prototype.is_all_lowcase = function() {
    return !this.match(/[A-Z]/) && this.match(/[a-z]/);
  };

  String.prototype.is_all_upcase = function() {
    return this.match(/[A-Z]/) && !this.match(/[a-z]/);
  };

  String.prototype.is_uncountable = function() {
    var lc, w, _i, _len, _ref8;
    lc = this.toLowerCase();
    _ref8 = String.uncountable_words;
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      w = _ref8[_i];
      if (lc === w) {
        return true;
      }
    }
    return false;
  };

  String.prototype.pluralize = function() {
    var rule, _i, _len, _ref8;
    if (this.is_uncountable()) {
      return this;
    }
    _ref8 = String.plural_rules;
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      rule = _ref8[_i];
      if (this.match(rule[0])) {
        if (this.is_all_upcase()) {
          return this.replace(rule[0], rule[1]).toUpperCase();
        } else {
          return this.replace(rule[0], rule[1]);
        }
      }
    }
    return this;
  };

  String.prototype.singularize = function() {
    var rule, _i, _len, _ref8;
    if (this.is_uncountable()) {
      return this;
    }
    _ref8 = String.singular_rules;
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      rule = _ref8[_i];
      if (this.match(rule[0])) {
        if (this.is_all_upcase()) {
          return this.replace(rule[0], rule[1]).toUpperCase();
        } else {
          return this.replace(rule[0], rule[1]);
        }
      }
    }
    return this;
  };

  String.uncountable_words = ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'moose', 'deer', 'news'];

  String.plural_rules = [[/(m)an$/gi, '$1en'], [/(pe)rson$/gi, '$1ople'], [/(child)$/gi, '$1ren'], [/^(ox)$/gi, '$1en'], [/(scenar)io$/gi, '$ii'], [/(ax|test)is$/gi, '$1es'], [/(octop|vir)us$/gi, '$1i'], [/(alias|status)$/gi, '$1es'], [/(bu)s$/gi, '$1ses'], [/(buffal|tomat|potat)o$/gi, '$1oes'], [/([ti])um$/gi, '$1a'], [/sis$/gi, 'ses'], [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'], [/(hive)$/gi, '$1s'], [/([^aeiouy]|qu)y$/gi, '$1ies'], [/(x|ch|ss|sh)$/gi, '$1es'], [/(matr|vert|ind)ix|ex$/gi, '$1ices'], [/([m|l])ouse$/gi, '$1ice'], [/(quiz)$/gi, '$1zes'], [/s$/gi, 's'], [/$/gi, 's']];

  String.singular_rules = [[/(m)en$/gi, '$1an'], [/(pe)ople$/gi, '$1rson'], [/(child)ren$/gi, '$1'], [/([ti])a$/gi, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/gi, '$1$2sis'], [/(scenar)ii$/gi, '$1io'], [/(hive)s$/gi, '$1'], [/(tive)s$/gi, '$1'], [/(curve)s$/gi, '$1'], [/([lr])ves$/gi, '$1f'], [/([^fo])ves$/gi, '$1fe'], [/([^aeiouy]|qu)ies$/gi, '$1y'], [/(s)eries$/gi, '$1eries'], [/(m)ovies$/gi, '$1ovie'], [/(x|ch|ss|sh)es$/gi, '$1'], [/([m|l])ice$/gi, '$1ouse'], [/(bus)es$/gi, '$1'], [/(o)es$/gi, '$1'], [/(shoe)s$/gi, '$1'], [/(cris|ax|test)es$/gi, '$1is'], [/(octop|vir)i$/gi, '$1us'], [/(alias|status)es$/gi, '$1'], [/^(ox)en/gi, '$1'], [/(vert|ind)ices$/gi, '$1ex'], [/(matr)ices$/gi, '$1ix'], [/(quiz)zes$/gi, '$1'], [/s$/gi, '']];

  _CAFEINE_ROOT.Cafeine.Validation = Validation = (function(_super) {
    var STD_TYPES;

    __extends(Validation, _super);

    function Validation() {
      return Validation.__super__.constructor.apply(this, arguments);
    }

    STD_TYPES = {
      string: true,
      number: true,
      "function": true,
      undefined: true
    };

    Validation.error = function(msg) {
      throw new Error("Validation failed: " + msg);
    };

    Validation.has_properties = function() {
      var properties;
      properties = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(properties, validation) {
        return function(target) {
          var check, name, prop, type, _i, _len, _ref8, _results,
            _this = this;
          check = function(name, type) {
            if (type != null) {
              if (STD_TYPES[type]) {
                if (typeof target[name] !== type) {
                  validation.error("typeof `" + name + "` isn't `" + type + "` (it's `" + (typeof target[name]) + "`)");
                }
              } else {
                if (!(target[name] instanceof type)) {
                  validation.error("typeof `" + name + "` isn't `" + type + "` (it's `" + (typeof target[name]) + "`)");
                }
              }
            }
            if (!Object.hasOwnProperty.call(target, name)) {
              return validation.error("" + name + " doesn't exists");
            }
          };
          _results = [];
          for (_i = 0, _len = properties.length; _i < _len; _i++) {
            prop = properties[_i];
            if (typeof prop === 'string') {
              _ref8 = prop.split(/:/), name = _ref8[0], type = _ref8[1];
              _results.push(check.call(this, name, type));
            } else if (typeof prop === 'object') {
              _results.push((function() {
                var _results1;
                _results1 = [];
                for (name in prop) {
                  type = prop[name];
                  _results1.push(check.call(this, name, type));
                }
                return _results1;
              }).call(this));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(properties, this);
    };

    Validation.type_of = function(type) {
      if (typeof type === 'string') {
        return (function(type, validation) {
          return function(target) {
            if (typeof target !== type) {
              return validation.error("typeof `" + target + "` isn't `" + value + "`");
            }
          };
        })(type, this);
      } else {
        return (function(type, validation) {
          return function(target) {
            console.log(target, type);
            if (!(target instanceof type)) {
              return validation.error("typeof `" + target + "` isn't `" + value.name + "`");
            }
          };
        })(type, this);
      }
    };

    Validation.instance_of = Validation.type_of;

    return Validation;

  })(_CAFEINE_ROOT.Cafeine.ActiveObject);

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var KReportEditor, PropertiesPanel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  KReportEditor = (function(_super) {
    var FORMATS, KNOWN_FORMATS, MENUS, cm2px, px2cm;

    __extends(KReportEditor, _super);

    FORMATS = {
      A6: ['10.5cm', '14.8cm'],
      A5: ['14.8cm', '21cm'],
      A4: ['21cm', '29.7cm'],
      A3: ['29.7cm', '42cm']
    };

    KNOWN_FORMATS = ['A3', 'A4', 'A5', 'A6'];

    KReportEditor.include(Cafeine.Plugin, Cafeine.Editable, Cafeine.Observable);

    KReportEditor.jquery_plugin("kreport");

    KReportEditor.observable('save');

    KReportEditor.prototype.margin_top = '1cm';

    KReportEditor.prototype.margin_bottom = '1cm';

    KReportEditor.prototype.margin_left = '1cm';

    KReportEditor.prototype.margin_right = '1cm';

    KReportEditor.prototype.name = 'untitled report';

    KReportEditor.prototype._format = 'A4';

    KReportEditor.prototype.width = FORMATS['A4'][0];

    KReportEditor.prototype.height = FORMATS['A4'][1];

    KReportEditor.prototype.landscape = false;

    cm2px = function(cm) {
      return parseFloat(cm) * 28.346456692913385826771653543305;
    };

    px2cm = function(px) {
      return (parseFloat(px) / 28.346456692913385826771653543305).round(0.01) + 'cm';
    };

    KReportEditor.attr('format', {
      get: function() {
        return this._format;
      },
      set: function(value) {
        var vals;
        vals = FORMATS[value];
        if (vals != null) {
          this._format = value;
        } else {
          this._format = 'A4';
          vals = FORMATS[this._format];
        }
        this.width = vals[0];
        return this.height = vals[1];
      }
    });

    MENUS = {
      Report: {
        Save: "save",
        hr1: '***',
        'Properties...': 'properties'
      },
      Edit: {
        Undo: 'undo',
        Redo: 'redo'
      }
    };

    KReportEditor.editable({
      'name': {
        label: 'Name',
        type: 'string'
      },
      'format': {
        label: 'Format',
        type: KNOWN_FORMATS
      },
      'landscape': {
        label: 'Landscape',
        type: 'boolean'
      },
      'margin_top': {
        label: 'Margin Top (cm)',
        type: 'string'
      },
      'margin_bottom': {
        label: 'Margin Bottom (cm)',
        type: 'string'
      },
      'margin_left': {
        label: 'Margin Left some azfazfazfazf text (cm)',
        type: 'string'
      },
      'margin_right': {
        label: 'Margin Right (cm)',
        type: 'string'
      }
    });

    KReportEditor.prototype.when_action = function(name) {
      if (this["_when_action_" + name] != null) {
        this["_when_action_" + name]();
        return true;
      } else {
        console.log("UNIMPLEMENTED ACTION: " + name);
        return false;
      }
    };

    KReportEditor.prototype._when_action_save = function() {
      var self;
      self = this;
      this.properties.propertiesPanel(function() {
        return this.set(self);
      });
      return true;
    };

    KReportEditor.prototype._when_action_properties = function() {
      var form,
        _this = this;
      form = this.create_edit_form({
        "class": 'form-horizontal',
        decoration: function(label, control) {
          var control_wrapper, group_wrapper;
          $(label).attr({
            "class": 'control-label'
          });
          control_wrapper = $(document.createElement('div')).attr({
            "class": 'controls'
          });
          control_wrapper.append(control);
          group_wrapper = $(document.createElement('div')).attr({
            "class": 'control-group'
          });
          group_wrapper.append([label, control_wrapper]);
          return group_wrapper[0];
        }
      });
      return this.show_dialog("Document properties", {
        content: form,
        buttons: {
          "Apply": {
            "class": "btn-primary",
            click: function() {
              form.apply_to_object();
              return _this.hide_dialog();
            }
          },
          "Cancel": {
            click: function() {
              return _this.hide_dialog();
            }
          }
        }
      });
    };

    KReportEditor.prototype.generate_menu_bar = function() {
      var brand, dd, dd_ul, k, k2, nav, navbar_inner, v, v2, _fn,
        _this = this;
      this.navbar = $(document.createElement('div')).attr({
        "class": 'navbar kreport-navbar'
      });
      navbar_inner = $(document.createElement('div')).attr({
        "class": 'navbar-inner'
      });
      this.navbar.append(navbar_inner);
      brand = $(document.createElement('a')).attr({
        "class": 'brand',
        href: '#'
      }).text('KReport');
      nav = $(document.createElement('ul')).attr({
        "class": 'nav'
      });
      $(navbar_inner).append([brand, nav]);
      for (k in MENUS) {
        v = MENUS[k];
        dd = $(document.createElement('li')).attr({
          "class": 'dropdown'
        });
        nav.append(dd);
        dd.append($(document.createElement('a')).attr({
          "class": 'dropdown-toggle',
          'data-toggle': 'dropdown',
          'href': '#'
        }).html(k + '<b class="caret"></b>'));
        dd_ul = $(document.createElement('ul')).attr({
          "class": 'dropdown-menu',
          role: 'menu',
          'aria-labelledby': 'dLabel'
        });
        dd.append(dd_ul);
        if (typeof v === 'object') {
          _fn = function(k, v, k2, v2) {
            var dd_li;
            if (v2 === '***') {
              dd_li = $(document.createElement('li')).attr({
                "class": 'divider'
              });
              return dd_ul.append(dd_li);
            } else {
              dd_li = $(document.createElement('li')).append($(document.createElement('a')).attr({
                tabindex: '-1',
                href: '#'
              }).click((function() {
                return function() {
                  return _this.when_action(v2);
                };
              })()).text(k2));
              return dd_ul.append(dd_li);
            }
          };
          for (k2 in v) {
            v2 = v[k2];
            _fn(k, v, k2, v2);
          }
        }
      }
      return this.navbar;
    };

    KReportEditor.prototype.resize = function() {
      return this.content.css({
        height: this.content.height() - this.navbar.height()
      });
    };

    KReportEditor.prototype.init_dialog = function() {
      this.dialog_title = $(document.createElement('h3'));
      this.dialog_header = $(document.createElement('div')).attr({
        "class": 'modal-header'
      }).append([
        $(document.createElement('button')).attr({
          type: 'button',
          "class": 'close',
          'data-dismiss': 'modal',
          'aria-hidden': 'true'
        }).html("&times;"), this.dialog_title
      ]);
      this.dialog_content = $(document.createElement('div')).attr({
        "class": 'modal-body'
      });
      this.dialog_footer = $(document.createElement('div')).attr({
        "class": 'modal-footer'
      });
      this.dialog = $(document.createElement('div')).attr({
        "class": 'modal fade'
      }).css({
        display: 'none'
      });
      this.dialog.append([this.dialog_header, this.dialog_content, this.dialog_footer]);
      return this.dialog;
    };

    KReportEditor.prototype.show_dialog = function(title, opts) {
      var button, name, parameters, _ref, _ref1, _ref2, _results;
      if (opts == null) {
        opts = {};
      }
      this.dialog_title.text(title);
      this.dialog.css({
        display: 'block'
      }).modal();
      opts = Cafeine.merge({
        content: '',
        buttons: {}
      }, opts);
      this.dialog_content.empty().append(opts.content);
      this.dialog_footer.empty();
      _ref = opts.buttons;
      _results = [];
      for (name in _ref) {
        parameters = _ref[name];
        button = $(document.createElement('a')).attr({
          "class": "btn " + ((_ref2 = parameters["class"]) != null ? _ref2 : '')
        }).click((_ref1 = parameters.click) != null ? _ref1 : function() {}).text(name);
        _results.push(this.dialog_footer.append(button));
      }
      return _results;
    };

    KReportEditor.prototype.hide_dialog = function() {
      return this.dialog.modal('hide');
    };

    KReportEditor.prototype.refresh_page = function() {
      var height, inner_height, inner_width, width, _ref;
      inner_width = px2cm(cm2px(this.width) - (cm2px(this.margin_left) + cm2px(this.margin_right)));
      inner_height = px2cm(cm2px(this.height) - (cm2px(this.margin_top) + cm2px(this.margin_bottom)));
      width = this.width;
      height = this.height;
      if (this.landscape) {
        _ref = [inner_height, inner_width, height, width], inner_width = _ref[0], inner_height = _ref[1], width = _ref[2], height = _ref[3];
      }
      this.page = $("#kreport-page").css({
        width: width,
        height: height
      });
      return this.page_content.css({
        'margin-left': this.margin_left,
        'margin-right': this.margin_right,
        'margin-top': this.margin_top,
        'margin-bottom': this.margin_bottom,
        width: inner_width,
        height: inner_height
      });
    };

    function KReportEditor(element) {
      var _this = this;
      this.element = $(element);
      this.element.empty();
      this.element.append(this.generate_menu_bar());
      this.content = $(document.createElement('div')).attr({
        id: 'kreport-content'
      });
      this.element.append(this.content);
      this.canvas = $(document.createElement('div')).attr({
        id: 'kreport-canvas'
      });
      this.toolbox = $(document.createElement('div')).attr({
        id: 'kreport-toolbox'
      });
      this.properties = $(document.createElement('div')).attr({
        id: 'kreport-properties-panel'
      });
      this.properties.propertiesPanel();
      this.toolbox.append(this.properties);
      this.content.append([this.toolbox, this.canvas]);
      this.element.append(this.content);
      this.page = $(document.createElement('div')).attr({
        id: 'kreport-page'
      });
      this.page_content = $(document.createElement('div')).attr({
        id: 'kreport-page-content'
      });
      this.element.append(this.init_dialog());
      this.page.append(this.page_content);
      this.canvas.append(this.page);
      $('.dropdown-toggle').dropdown();
      this.resize();
      $(window).resize(function() {
        return _this.resize;
      });
      this.when_edition_done(this.refresh_page);
    }

    return KReportEditor;

  })(Cafeine.ActiveObject);

  PropertiesPanel = (function(_super) {

    __extends(PropertiesPanel, _super);

    PropertiesPanel.include(Cafeine.Plugin);

    PropertiesPanel.jquery_plugin('propertiesPanel');

    function PropertiesPanel(element) {
      this.element = $(element);
      this.table = $(document.createElement('table'));
      this.tbody = $(document.createElement('tbody'));
      this.table.append(this.tbody);
      this.element.empty().append(this.table).addClass('property-panel');
    }

    PropertiesPanel.prototype.set = function(target) {
      var form;
      if (target.create_edit_form == null) {
        throw new Error("target must be editable");
      }
      form = target.create_edit_form({
        per_field_update: true,
        "class": '',
        decoration: function(label, control) {
          var td_data, td_label, tr;
          tr = $(document.createElement('tr'));
          td_label = $(document.createElement('th'));
          td_data = $(document.createElement('td'));
          $(control).css({
            width: '100%'
          }).addClass('prop-input');
          $(label).addClass('prop-label');
          td_label.append(label);
          td_data.append(control);
          tr.append([td_label, td_data]);
          return tr[0];
        }
      });
      console.log("Form = ", form);
      return this.tbody.empty().append(form);
    };

    return PropertiesPanel;

  })(Cafeine.ActiveObject);

}).call(this);
